 {/* Teachers Section */}




          {activeSection === 'teachers' && (
            <div className="h-full overflow-y-auto p-8 animate-in fade-in-0 slide-in-from-right-4 duration-500">
              <div className="space-y-8 max-w-7xl mx-auto">
                {/* Header with Add Button */}
                <div className="flex justify-between items-center">
                  <div>
                    <h1 className="text-5xl font-extrabold text-white mb-2" style={{ fontFamily: 'Inter, system-ui, -apple-system, sans-serif', fontWeight: 900, letterSpacing: '-0.02em' }}>Teachers Management</h1>
                    <p className="text-white/80 text-lg">Manage faculty members and their assignments</p>
                  </div>
                  <Dialog open={showAddTeacher} onOpenChange={setShowAddTeacher}>
                    <DialogTrigger asChild>
                      <Button className="bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30">
                        <UserPlus className="w-4 h-4 mr-2" />
                        Add Teacher
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="bg-black/80 backdrop-blur-2xl border border-white/20 text-white">
                      <DialogHeader>
                        <DialogTitle className="text-white">Add New Teacher</DialogTitle>
                        <DialogDescription className="text-white/70">
                          Add a new faculty member to your institution
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div>
                          <Label className="text-white">Full Name</Label>
                          <Input
                            placeholder="Teacher's full name"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.name}
                            onChange={(e) => setNewTeacher({ ...newTeacher, name: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Email</Label>
                          <Input
                            type="email"
                            placeholder="teacher@techverse.edu"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.email}
                            onChange={(e) => setNewTeacher({ ...newTeacher, email: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Subject Specialization</Label>
                          <Input
                            placeholder="e.g., Database Management"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.subject}
                            onChange={(e) => setNewTeacher({ ...newTeacher, subject: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Experience</Label>
                          <Input
                            placeholder="e.g., 5 years"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.experience}
                            onChange={(e) => setNewTeacher({ ...newTeacher, experience: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Phone</Label>
                          <Input
                            placeholder="+1 234-567-8900"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.phone}
                            onChange={(e) => setNewTeacher({ ...newTeacher, phone: e.target.value })}
                          />
                        </div>
                        <Button
                          onClick={handleAddTeacher}
                          className="w-full bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30"
                        >
                          Add Teacher
                        </Button>
                      </div>
                    </DialogContent>
                  </Dialog>

                  {/* Edit Teacher Dialog */}
                  <Dialog open={showEditTeacher} onOpenChange={setShowEditTeacher}>
                    <DialogContent className="bg-black/80 backdrop-blur-2xl border border-white/20 text-white">
                      <DialogHeader>
                        <DialogTitle className="text-white">Edit Teacher</DialogTitle>
                        <DialogDescription className="text-white/70">
                          Update teacher information
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div>
                          <Label className="text-white">Full Name</Label>
                          <Input
                            placeholder="Teacher's full name"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.name}
                            onChange={(e) => setNewTeacher({ ...newTeacher, name: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Email</Label>
                          <Input
                            type="email"
                            placeholder="teacher@techverse.edu"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.email}
                            onChange={(e) => setNewTeacher({ ...newTeacher, email: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Subject Specialization</Label>
                          <Input
                            placeholder="e.g., Database Management"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.subject}
                            onChange={(e) => setNewTeacher({ ...newTeacher, subject: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Experience</Label>
                          <Input
                            placeholder="e.g., 5 years"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.experience}
                            onChange={(e) => setNewTeacher({ ...newTeacher, experience: e.target.value })}
                          />
                        </div>
                        <div>
                          <Label className="text-white">Phone</Label>
                          <Input
                            placeholder="+1 234-567-8900"
                            className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            value={newTeacher.phone}
                            onChange={(e) => setNewTeacher({ ...newTeacher, phone: e.target.value })}
                          />
                        </div>
                        <Button
                          onClick={handleUpdateTeacher}
                          className="w-full bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30"
                        >
                          Update Teacher
                        </Button>
                      </div>
                    </DialogContent>
                  </Dialog>
                </div>

                {/* Search and Filter */}
                <div className="flex gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60 w-4 h-4" />
                    <Input
                      placeholder="Search teachers..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 bg-white/10 border-white/20 text-white placeholder-white/60"
                    />
                  </div>
                </div>

                {/* Teachers Table */}
                <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl">
                  <CardHeader>
                    <CardTitle className="text-white">Faculty Members</CardTitle>
                    <CardDescription className="text-white/70">
                      {/* Showing {filteredTeachers.length} teachers */}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow className="border-white/10">
                          <TableHead className="text-white/80">Teacher</TableHead>
                          <TableHead className="text-white/80">Subject</TableHead>
                          <TableHead className="text-white/80">Branches</TableHead>
                          <TableHead className="text-white/80">Experience</TableHead>
                          <TableHead className="text-white/80">Contact</TableHead>
                          <TableHead className="text-white/80">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      {/* <TableBody>
                        {filteredTeachers.map((teacher) => (
                          <TableRow key={teacher.id} className="border-white/10">
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <Avatar>
                                  <AvatarFallback className="bg-white/20 text-white">
                                    {teacher.avatar}
                                  </AvatarFallback>
                                </Avatar>
                                <div>
                                  <div className="font-medium text-white">{teacher.name}</div>
                                  <div className="text-sm text-white/60">{teacher.email}</div>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell className="text-white">{teacher.subject}</TableCell>
                            <TableCell>
                              <div className="flex gap-1 flex-wrap">
                                {teacher.branches.map((branch, index) => (
                                  <Badge key={index} variant="outline" className="border-white/30 text-white text-xs">
                                    {branch}
                                  </Badge>
                                ))}
                              </div>
                            </TableCell>
                            <TableCell className="text-white">{teacher.experience}</TableCell>
                            <TableCell>
                              <div className="space-y-1">
                                <div className="flex items-center gap-1 text-white/70 text-sm">
                                  <Phone className="w-3 h-3" />
                                  {teacher.phone}
                                </div>
                                <div className="flex items-center gap-1 text-white/70 text-sm">
                                  <Mail className="w-3 h-3" />
                                  {teacher.email}
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="sm" className="text-white/70 hover:text-white">
                                    <MoreHorizontal className="w-4 h-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent className="bg-black/80 backdrop-blur-2xl border border-white/20">
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleEditTeacher(teacher)}
                                  >
                                    <Edit3 className="w-4 h-4 mr-2" />
                                    Edit
                                  </DropdownMenuItem>
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleViewTeacherSchedule(teacher)}
                                  >
                                    <Calendar className="w-4 h-4 mr-2" />
                                    View Schedule
                                  </DropdownMenuItem>
                                  <DropdownMenuItem
                                    className="text-red-400 hover:bg-red-500/10"
                                    onClick={() => handleDeleteTeacher(teacher.id)}
                                  >
                                    <Trash2 className="w-4 h-4 mr-2" />
                                    Remove
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody> {/* <TableBody>
                        {filteredTeachers.map((teacher) => (
                          <TableRow key={teacher.id} className="border-white/10">
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <Avatar>
                                  <AvatarFallback className="bg-white/20 text-white">
                                    {teacher.avatar}
                                  </AvatarFallback>
                                </Avatar>
                                <div>
                                  <div className="font-medium text-white">{teacher.name}</div>
                                  <div className="text-sm text-white/60">{teacher.email}</div>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell className="text-white">{teacher.subject}</TableCell>
                            <TableCell>
                              <div className="flex gap-1 flex-wrap">
                                {teacher.branches.map((branch, index) => (
                                  <Badge key={index} variant="outline" className="border-white/30 text-white text-xs">
                                    {branch}
                                  </Badge>
                                ))}
                              </div>
                            </TableCell>
                            <TableCell className="text-white">{teacher.experience}</TableCell>
                            <TableCell>
                              <div className="space-y-1">
                                <div className="flex items-center gap-1 text-white/70 text-sm">
                                  <Phone className="w-3 h-3" />
                                  {teacher.phone}
                                </div>
                                <div className="flex items-center gap-1 text-white/70 text-sm">
                                  <Mail className="w-3 h-3" />
                                  {teacher.email}
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="sm" className="text-white/70 hover:text-white">
                                    <MoreHorizontal className="w-4 h-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent className="bg-black/80 backdrop-blur-2xl border border-white/20">
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleEditTeacher(teacher)}
                                  >
                                    <Edit3 className="w-4 h-4 mr-2" />
                                    Edit
                                  </DropdownMenuItem>
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleViewTeacherSchedule(teacher)}
                                  >
                                    <Calendar className="w-4 h-4 mr-2" />
                                    View Schedule
                                  </DropdownMenuItem>
                                  <DropdownMenuItem
                                    className="text-red-400 hover:bg-red-500/10"
                                    onClick={() => handleDeleteTeacher(teacher.id)}
                                  >
                                    <Trash2 className="w-4 h-4 mr-2" />
                                    Remove
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody> */}
                    </Table>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}

          {/* Students Section */}
          {activeSection === 'students' && (
            <div className="h-full overflow-y-auto p-8 animate-in fade-in-0 slide-in-from-right-4 duration-500">
              <div className="space-y-8 max-w-7xl mx-auto">
                {/* Header */}
                <div className="flex justify-between items-center">
                  <div>
                    <h1 className="text-5xl font-extrabold text-white mb-2" style={{ fontFamily: 'Inter, system-ui, -apple-system, sans-serif', fontWeight: 900, letterSpacing: '-0.02em' }}>Students Management</h1>
                    <p className="text-white/80 text-lg">Manage all students across branches</p>
                  </div>
                </div>

                {/* Search and Filter */}
                <div className="flex gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60 w-4 h-4" />
                    <Input
                      placeholder="Search students..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 bg-white/10 border-white/20 text-white placeholder-white/60"
                    />
                  </div>
                  <Select value={selectedBranch} onValueChange={setSelectedBranch}>
                    <SelectTrigger className="w-48 bg-white/10 border-white/20 text-white">
                      <SelectValue placeholder="Filter by branch" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Branches</SelectItem>
                      {branches.map((branch) => (
                        <SelectItem key={branch.id} value={branch.name}>
                          {branch.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Students Table */}
                {/* <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl">
                  <CardHeader>
                    <CardTitle className="text-white">Students</CardTitle>
                    <CardDescription className="text-white/70">
                      Showing 
                      {filteredStudents.length}
                       students
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow className="border-white/10">
                          <TableHead className="text-white/80">Student</TableHead>
                          <TableHead className="text-white/80">Roll Number</TableHead>
                          <TableHead className="text-white/80">Branch</TableHead>
                          <TableHead className="text-white/80">Year</TableHead>
                          <TableHead className="text-white/80">Attendance</TableHead>
                          <TableHead className="text-white/80">Contact</TableHead>
                          <TableHead className="text-white/80">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredStudents.map((student) => (
                          <TableRow key={student.id} className="border-white/10">
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <Avatar>
                                  <AvatarFallback className="bg-white/20 text-white">
                                    {student.avatar}
                                  </AvatarFallback>
                                </Avatar>
                                <div>
                                  <div className="font-medium text-white">{student.name}</div>
                                  <div className="text-sm text-white/60">{student.email}</div>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell className="text-white font-mono">{student.rollNumber}</TableCell>
                            <TableCell>
                              <Badge variant="outline" className="border-white/30 text-white">
                                {student.branch}
                              </Badge>
                            </TableCell>
                            <TableCell className="text-white">{student.year}</TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <div className={`w-2 h-2 rounded-full ${getAttendancePercentage(student) >= 85 ? 'bg-green-400' :
                                  getAttendancePercentage(student) >= 75 ? 'bg-yellow-400' : 'bg-red-400'
                                  }`} />
                                <span className="text-white">{getAttendancePercentage(student)}%</span>
                                <span className="text-white/60 text-sm">
                                  ({student.attendance.present}/{student.attendance.total})
                                </span>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-1 text-white/70 text-sm">
                                <Phone className="w-3 h-3" />
                                {student.phone}
                              </div>
                            </TableCell>
                            <TableCell>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="sm" className="text-white/70 hover:text-white">
                                    <MoreHorizontal className="w-4 h-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent className="bg-black/80 backdrop-blur-2xl border border-white/20">
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleViewStudent(student)}
                                  >
                                    <User className="w-4 h-4 mr-2" />
                                    View Profile
                                  </DropdownMenuItem>
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleViewStudentRecords(student)}
                                  >
                                    <BarChart3 className="w-4 h-4 mr-2" />
                                    View Records
                                  </DropdownMenuItem>
                                  <DropdownMenuItem
                                    className="text-white hover:bg-white/10"
                                    onClick={() => handleEditStudent(student)}
                                  >
                                    <Edit3 className="w-4 h-4 mr-2" />
                                    Edit Info
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card> */}
              </div>
            </div>
          )}







student dashboard


{/* Video Background */}
            <div className="fixed inset-0 z-0">
                {/* <video
                    autoPlay
                    loop
                    muted
                    className="absolute inset-0 w-full h-full object-cover"
                >
                    <source src="/latest-bg.mp4" type="video/mp4" />
                </video> */}
                <div className="absolute inset-0 bg-black/40 backdrop-blur-[2px]"></div>
            </div>

            {/* First-time Branch Setup Overlay */}
            {showBranchSetup && (
                <div className="fixed inset-0 z-[100] bg-black/70 backdrop-blur-sm flex items-center justify-center p-4">
                    <div className="w-full max-w-lg bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl rounded-2xl p-6">
                        <h2 className="text-white text-2xl font-bold mb-2">Select Your Branch</h2>
                        <p className="text-white/70 mb-4">Please choose your branch to personalize your experience.</p>
                        {branchLoading ? (
                            <p className="text-white/80">Loading branches...</p>
                        ) : (
                            <div className="space-y-3">
                                <label className="text-white/80 text-sm">Branch</label>
                                <select
                                    className="w-full bg-white/10 border border-white/20 text-white rounded-md px-3 py-2"
                                    value={selectedBranch}
                                    onChange={(e) => setSelectedBranch(e.target.value)}
                                >
                                    <option value="" className="bg-black text-white">Select a branch</option>
                                    {branchOptions.map((b) => (
                                        <option key={b} value={b} className="bg-black text-white">{b}</option>
                                    ))}
                                </select>
                                {branchError && <p className="text-red-300 text-sm">{branchError}</p>}
                            </div>
                        )}
                        <div className="flex gap-3 pt-4">
                            <button
                                disabled={!selectedBranch}
                                onClick={() => {
                                    // Persist a one-time choice locally; adjust to POST to backend if needed
                                    localStorage.setItem(branchSetKey, '1')
                                    localStorage.setItem(`branchName:${params?.id || 'student'}`, '')
                                    setStudentInfo(prev => ({ ...prev, branchName: selectedBranch }))
                                    setShowBranchSetup(false)
                                }}
                                className={`px-4 py-2 rounded-md border ${selectedBranch ? 'bg-white/20 border-white/30 text-white hover:bg-white/30' : 'bg-white/10 border-white/20 text-white/60 cursor-not-allowed'}`}
                            >
                                Save Branch
                            </button>
                            <button
                                onClick={() => {
                                    // Allow skipping, but we won't store a branch
                                    localStorage.setItem(branchSetKey, '1')
                                    setShowBranchSetup(false)
                                }}
                                className="px-4 py-2 rounded-md border border-white/20 text-white/80 hover:text-white hover:bg-white/15"
                            >
                                Skip for now
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Content Layer */}
            <div className="relative z-10 min-h-screen text-white flex">
                {/* Left Sidebar */}
                <div
                    className={`fixed left-0 top-0 h-screen z-50 transition-all duration-300 ease-in-out flex flex-col ${sidebarHovered ? 'w-80' : 'w-16'
                        }`}
                    onMouseEnter={() => setSidebarHovered(true)}
                    onMouseLeave={() => setSidebarHovered(false)}
                >
                    <div className="h-full bg-white/8 backdrop-blur-3xl border-r border-white/20 shadow-2xl">
                        {/* Student Profile Section */}
                        <div className="p-6 border-b border-white/20">
                            <div className={`transition-all duration-300 ${sidebarHovered ? 'flex items-center gap-3 mb-4' : 'flex justify-center items-center mb-6 w-full'
                                }`}>
                                <Avatar className={`transition-all duration-300 flex-shrink-0 backdrop-blur-sm ${sidebarHovered ? 'w-12 h-12' : 'w-8 h-8'
                                    }`}>
                                    <AvatarFallback className={`bg-white/90 text-black font-bold backdrop-blur-sm ${sidebarHovered ? 'text-xl' : 'text-sm'
                                        }`}>
                                        {studentInfo.avatar}
                                    </AvatarFallback>
                                </Avatar>
                                <div className={`transition-all duration-300 overflow-hidden ${sidebarHovered ? 'opacity-100 w-auto' : 'opacity-0 w-0'
                                    }`}>
                                    <h2 className="font-bold text-white whitespace-nowrap">{studentInfo.name}</h2>
                                    <p className="text-white/70 text-sm whitespace-nowrap">{studentInfo.rollNumber}</p>
                                </div>
                            </div>

                            {/* Current Time & Stats */}
                            <div className={`transition-all duration-300 overflow-hidden ${sidebarHovered ? 'opacity-100 max-h-96 mb-4' : 'opacity-0 max-h-0 mb-0'
                                }`}>
                                <div className="bg-white/10 backdrop-blur-2xl rounded-xl p-3 border border-white/20 shadow-lg">
                                    <div className="text-xs text-white/70 uppercase tracking-wider mb-1">Current Time</div>
                                    <div className="font-mono text-lg text-white">
                                        {currentTime.toLocaleTimeString('en-US', {
                                            hour: '2-digit',
                                            minute: '2-digit',
                                            hour12: true
                                        })}
                                    </div>
                                    <div className="text-sm text-white/80">
                                        {currentTime.toLocaleDateString('en-US', {
                                            weekday: 'long',
                                            month: 'short',
                                            day: 'numeric'
                                        })}
                                    </div>
                                </div>
                            </div>

                            {/* Quick Stats */}
                            {/* <div className={`transition-all duration-300 overflow-hidden ${sidebarHovered ? 'opacity-100 max-h-48' : 'opacity-0 max-h-0'
                                }`}>
                                <div className="grid grid-cols-2 gap-2">
                                    <div className="bg-green-500/20 backdrop-blur-2xl border border-green-500/40 rounded-xl p-2">
                                        <div className="text-xs text-green-300 font-medium">Attendance</div>
                                        <div className="font-bold text-green-200">{studentInfo.attendance.percentage}%</div>
                                    </div>
                                    <div className="bg-blue-500/20 backdrop-blur-2xl border border-blue-500/40 rounded-xl p-2">
                                        <div className="text-xs text-blue-300 font-medium">Present</div>
                                        <div className="font-bold text-blue-200">{studentInfo.attendance.presentDays}</div>
                                    </div>
                                </div>
                            </div> */}
                        </div>

                        {/* Navigation */}
                        <nav className="flex-1 px-3 py-6">
                            <div className="space-y-4">
                                {navItems.map((item) => {
                                    const Icon = item.icon
                                    return (
                                        <button
                                            key={item.id}
                                            onClick={() => setActiveSection(item.id)}
                                            className={`w-full flex items-center rounded-2xl transition-all duration-300 transform hover:scale-105 backdrop-blur-2xl ${sidebarHovered ? 'gap-3 px-4 py-4' : 'justify-center py-4 px-0'
                                                } ${activeSection === item.id
                                                    ? 'bg-white/20 text-white shadow-2xl border border-white/30'
                                                    : 'text-white/70 hover:bg-white/15 hover:text-white border border-transparent hover:border-white/20 hover:shadow-lg'
                                                }`}
                                            title={!sidebarHovered ? item.label : ''}
                                        >
                                            <div className={`flex items-center justify-center relative ${sidebarHovered ? 'w-auto' : 'w-full'}`}>
                                                <Icon className="w-5 h-5 flex-shrink-0" />
                                                {item.badge && item.badge > 0 && (
                                                    <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                                                        {item.badge}
                                                    </span>
                                                )}
                                            </div>
                                            <span className={`font-medium transition-all duration-300 overflow-hidden whitespace-nowrap ${sidebarHovered ? 'opacity-100 w-auto ml-0' : 'opacity-0 w-0 absolute'
                                                }`}>
                                                {item.label}
                                                {item.badge && item.badge > 0 && sidebarHovered && (
                                                    <span className="ml-2 bg-red-500 text-white text-xs rounded-full px-2 py-0.5">
                                                        {item.badge}
                                                    </span>
                                                )}
                                            </span>
                                        </button>
                                    )
                                })}
                            </div>
                        </nav>

                        {/* Bottom Sign Out */}
                        <div className="p-6 border-t border-white/10">
                            <Button
                                variant="ghost"
                                size="sm"
                                className={`w-full text-white/70 hover:text-white hover:bg-white/15 transition-all duration-300 hover:scale-105 transform rounded-2xl py-3 backdrop-blur-2xl border border-transparent hover:border-white/20 hover:shadow-lg ${sidebarHovered ? 'justify-start px-4' : 'justify-center px-0'
                                    }`}
                                asChild
                                title={!sidebarHovered ? 'Sign Out' : ''}
                            >
                                <Link to="/student/login" className={`flex items-center w-full ${sidebarHovered ? 'gap-2' : 'justify-center'
                                    }`}>
                                    <div className={`flex items-center justify-center ${sidebarHovered ? 'w-auto' : 'w-full'}`}>
                                        <LogOut className="w-5 h-5 flex-shrink-0" />
                                    </div>
                                    <span className={`font-medium transition-all duration-300 overflow-hidden whitespace-nowrap ${sidebarHovered ? 'opacity-100 w-auto ml-0' : 'opacity-0 w-0 absolute'
                                        }`}>
                                        Sign Out
                                    </span>
                                </Link>
                            </Button>
                        </div>
                    </div>
                </div>

                {/* Main Content */}
                <div className="flex-1 overflow-hidden ml-16">
                    {/* Overview Section */}
                    {activeSection === 'overview' &&
                        (
                            // <div className="h-full overflow-y-auto p-8 animate-in fade-in-0 slide-in-from-right-4 duration-500">
                            //     <div className="space-y-8 max-w-7xl mx-auto">
                            //         {/* Header */}
                            //         <div className="mb-8 animate-in fade-in-0 slide-in-from-top-2 duration-700 delay-100">
                            //             <h1 className="text-5xl font-extrabold text-white mb-2" style={{ fontFamily: 'Inter, system-ui, -apple-system, sans-serif', fontWeight: 900, letterSpacing: '-0.02em' }}>Student Dashboard</h1>
                            //             <p className="text-white/80 text-lg">Welcome back, {studentInfo.name}!</p>
                            //         </div>


                            //         {/* Quick Actions Grid */}
                            //         <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 animate-in fade-in-0 slide-in-from-bottom-4 duration-700 delay-300">
                            //             {/* Attendance Code Entry */}
                            //             <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-left-4 duration-500 delay-400">
                            //                 <CardHeader>
                            //                     <CardTitle className="text-white flex items-center gap-2">
                            //                         <Hash className="w-5 h-5 text-blue-400" />
                            //                         Mark Attendance
                            //                     </CardTitle>
                            //                     <CardDescription className="text-white/70">Enter the attendance code provided by your teacher</CardDescription>
                            //                 </CardHeader>
                            //                 <CardContent className="space-y-4">
                            //                     <div className="flex gap-3">
                            //                         <Input
                            //                             placeholder="Enter 6-digit code"
                            //                             value={attendanceCode}
                            //                             onChange={(e) => setAttendanceCode(e.target.value.toUpperCase())}
                            //                             className="bg-white/10 border-white/20 text-white placeholder-white/60"
                            //                             maxLength={6}
                            //                         />
                            //                         <Button
                            //                             // onClick={handleAttendanceSubmit}
                            //                             className="bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30"
                            //                         >
                            //                             Submit
                            //                         </Button>
                            //                     </div>
                            //                     {attendanceMessage && (
                            //                         <p className="text-sm text-white/90">{attendanceMessage}</p>
                            //                     )}
                            //                 </CardContent>
                            //             </Card>

                            //             {/* Current Class */}
                            //             <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-right-4 duration-500 delay-500">
                            //                 <CardHeader>
                            //                     <CardTitle className="text-white flex items-center gap-2">
                            //                         <Clock className="w-5 h-5 text-orange-400" />
                            //                         {currentClass ? (currentClass.status === 'ongoing' ? 'Ongoing Class' : 'Next Class') : 'No Classes Today'}
                            //                     </CardTitle>
                            //                 </CardHeader>
                            //                 <CardContent>
                            //                     {currentClass ? (
                            //                         <div className="space-y-3">
                            //                             <div className="flex items-center gap-2">
                            //                                 <BookOpen className="w-4 h-4 text-white/60" />
                            //                                 <span className="text-white font-medium">{currentClass.subject}</span>
                            //                             </div>
                            //                             <div className="flex items-center gap-2">
                            //                                 <Users className="w-4 h-4 text-white/60" />
                            //                                 <span className="text-white/80">{currentClass.teacher}</span>
                            //                             </div>
                            //                             <div className="flex items-center gap-2">
                            //                                 <Timer className="w-4 h-4 text-white/60" />
                            //                                 <span className="text-white/80">{currentClass.time}</span>
                            //                             </div>
                            //                             <Badge className={`${currentClass.status === 'ongoing' ? 'bg-green-500/20 text-green-200' : 'bg-blue-500/20 text-blue-200'}`}>
                            //                                 {currentClass.status === 'ongoing' ? 'Live Now' : 'Upcoming'}
                            //                             </Badge>
                            //                         </div>
                            //                     ) : (
                            //                         <p className="text-white/70">No classes scheduled for today</p>
                            //                     )}
                            //                 </CardContent>
                            //             </Card>
                            //         </div>

                            //         {/* Statistics Cards */}
                            //         {/* <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 animate-in fade-in-0 slide-in-from-bottom-4 duration-700 delay-600">
                            //         <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-bottom-2 duration-500 delay-700">
                            //             <CardHeader className="pb-2">
                            //                 <CardTitle className="text-white flex items-center gap-2">
                            //                     <TrendingUp className="w-5 h-5 text-green-400" />
                            //                     Overall Attendance
                            //                 </CardTitle>
                            //             </CardHeader>
                            //             <CardContent>
                            //                 <div className="text-3xl font-bold text-white">{studentInfo.attendance.percentage}%</div>
                            //                 <p className="text-white/60 text-sm">{studentInfo.attendance.presentDays}/{studentInfo.attendance.totalDays} days</p>
                            //             </CardContent>
                            //         </Card>

                            //         <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-bottom-2 duration-500 delay-800">
                            //             <CardHeader className="pb-2">
                            //                 <CardTitle className="text-white flex items-center gap-2">
                            //                     <CheckCircle2 className="w-5 h-5 text-blue-400" />
                            //                     Present Days
                            //                 </CardTitle>
                            //             </CardHeader>
                            //             <CardContent>
                            //                 <div className="text-3xl font-bold text-white">{studentInfo.attendance.presentDays}</div>
                            //                 <p className="text-white/60 text-sm">Total present</p>
                            //             </CardContent>
                            //         </Card>

                            //         <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-bottom-2 duration-500 delay-900">
                            //             <CardHeader className="pb-2">
                            //                 <CardTitle className="text-white flex items-center gap-2">
                            //                     <XCircle className="w-5 h-5 text-red-400" />
                            //                     Absent Days
                            //                 </CardTitle>
                            //             </CardHeader>
                            //             <CardContent>
                            //                 <div className="text-3xl font-bold text-white">{studentInfo.attendance.absentDays}</div>
                            //                 <p className="text-white/60 text-sm">Total absent</p>
                            //             </CardContent>
                            //         </Card>

                            //         <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-bottom-2 duration-500 delay-1000">
                            //             <CardHeader className="pb-2">
                            //                 <CardTitle className="text-white flex items-center gap-2">
                            //                     <Bell className="w-5 h-5 text-orange-400" />
                            //                     New Notifications
                            //                 </CardTitle>
                            //             </CardHeader>
                            //             <CardContent>
                            //                 <div className="text-3xl font-bold text-white">{unreadCount}</div>
                            //                 <p className="text-white/60 text-sm">Unread messages</p>
                            //             </CardContent>
                            //         </Card>
                            //     </div> */}

                            //         {/* Recent Attendance */}
                            //         <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-bottom-4 duration-700 delay-1100">
                            //             <CardHeader>
                            //                 <CardTitle className="text-white">Recent Attendance</CardTitle>
                            //                 <CardDescription className="text-white/70">Your latest attendance records</CardDescription>
                            //             </CardHeader>
                            //             <CardContent>
                            //                 <div className="space-y-4">
                            //                     {studentInfo.recentAttendance.map((record, index) => (
                            //                         <div key={index} className={`flex items-center gap-3 p-3 bg-white/5 rounded-lg animate-in fade-in-0 slide-in-from-left-2 duration-500 delay-${1200 + index * 100}`}>
                            //                             {record.status === 'present' ? (
                            //                                 <CheckCircle2 className="w-5 h-5 text-green-400" />
                            //                             ) : (
                            //                                 <XCircle className="w-5 h-5 text-red-400" />
                            //                             )}
                            //                             <div className="flex-1">
                            //                                 <p className="text-white text-sm font-medium">{record.subject}</p>
                            //                                 <p className="text-white/60 text-xs">{new Date(record.date).toLocaleDateString()}</p>
                            //                             </div>
                            //                             <div className="flex gap-2">
                            //                                 <Badge className={record.status === 'present' ? 'bg-green-500/20 text-green-200' : 'bg-red-500/20 text-red-200'}>
                            //                                     {record.status}
                            //                                 </Badge>
                            //                                 <Badge className={record.markedBy === 'student' ? 'bg-blue-500/20 text-blue-200' : 'bg-purple-500/20 text-purple-200'}>
                            //                                     {record.markedBy}
                            //                                 </Badge>
                            //                             </div>
                            //                         </div>
                            //                     ))}
                            //                 </div>
                            //             </CardContent>
                            //         </Card>
                            //     </div>
                            // </div>
                            <div>

                            </div>
                        )}


                    {/* Attendance Section */}
                    {activeSection === 'attendance' && (
                        <div className="h-full overflow-y-auto p-8 animate-in fade-in-0 slide-in-from-right-4 duration-500">
                            <div className="space-y-8 max-w-7xl mx-auto">
                                <div>
                                    <h1 className="text-5xl font-extrabold text-white mb-2" style={{ fontFamily: 'Inter, system-ui, -apple-system, sans-serif', fontWeight: 900, letterSpacing: '-0.02em' }}>Attendance Details</h1>
                                    <p className="text-white/80 text-lg">Detailed view of your attendance records</p>
                                </div>

                                {/* Subject-wise Attendance */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    {studentInfo.subjects.map((subject, index) => (
                                        <Card key={subject.name} className={`bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl animate-in fade-in-0 slide-in-from-bottom-2 duration-500 delay-${200 + index * 100}`}>
                                            <CardHeader>
                                                <CardTitle className="text-white flex items-center gap-2">
                                                    <BookOpen className="w-5 h-5 text-blue-400" />
                                                    {subject.name}
                                                </CardTitle>
                                                <CardDescription className="text-white/70">{subject.teacher}</CardDescription>
                                            </CardHeader>
                                            <CardContent>
                                                <div className="text-3xl font-bold text-white mb-2">{subject.attendancePercent}%</div>
                                                <div className="flex items-center gap-2">
                                                    {subject.attendancePercent >= 75 ? (
                                                        <TrendingUp className="w-4 h-4 text-green-400" />
                                                    ) : (
                                                        <TrendingDown className="w-4 h-4 text-red-400" />
                                                    )}
                                                    <span className={`text-sm ${subject.attendancePercent >= 75 ? 'text-green-400' : 'text-red-400'}`}>
                                                        {subject.attendancePercent >= 75 ? 'Good' : 'Needs Improvement'}
                                                    </span>
                                                </div>
                                            </CardContent>
                                        </Card>
                                    ))}
                                </div>

                                {/* Attendance History */}
                                <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl">
                                    <CardHeader>
                                        <CardTitle className="text-white">Complete Attendance History</CardTitle>
                                        <CardDescription className="text-white/70">All your attendance records</CardDescription>
                                    </CardHeader>
                                    <CardContent>
                                        <div className="space-y-3">
                                            {studentInfo.recentAttendance.map((record, index) => (
                                                <div key={index} className="flex items-center justify-between p-4 bg-white/5 rounded-lg">
                                                    <div className="flex items-center gap-3">
                                                        {record.status === 'present' ? (
                                                            <CheckCircle2 className="w-5 h-5 text-green-400" />
                                                        ) : (
                                                            <XCircle className="w-5 h-5 text-red-400" />
                                                        )}
                                                        <div>
                                                            <p className="text-white font-medium">{record.subject}</p>
                                                            <p className="text-white/60 text-sm">{new Date(record.date).toLocaleDateString('en-US', {
                                                                weekday: 'long',
                                                                year: 'numeric',
                                                                month: 'short',
                                                                day: 'numeric'
                                                            })}</p>
                                                        </div>
                                                    </div>
                                                    <div className="flex gap-2">
                                                        <Badge className={record.status === 'present' ? 'bg-green-500/20 text-green-200' : 'bg-red-500/20 text-red-200'}>
                                                            {record.status}
                                                        </Badge>
                                                        <Badge className={record.markedBy === 'student' ? 'bg-blue-500/20 text-blue-200' : 'bg-purple-500/20 text-purple-200'}>
                                                            {record.markedBy}
                                                        </Badge>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </CardContent>
                                </Card>
                            </div>
                        </div>
                    )}

                    {/* Profile Section */}
                    {activeSection === 'profile' && (
                        <div className="h-full overflow-y-auto p-8 animate-in fade-in-0 slide-in-from-right-4 duration-500">
                            <div className="space-y-8 max-w-4xl mx-auto">
                                <div>
                                    <h1 className="text-5xl font-extrabold text-white mb-2" style={{ fontFamily: 'Inter, system-ui, -apple-system, sans-serif', fontWeight: 900, letterSpacing: '-0.02em' }}>Student Profile</h1>
                                    <p className="text-white/80 text-lg">Your personal and academic information</p>
                                </div>

                                <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl">
                                    <CardHeader>
                                        <div className="flex items-center justify-between">
                                            <div className="flex items-center gap-4">
                                                <Avatar className="w-20 h-20">
                                                    <AvatarFallback className="bg-white/90 text-black text-2xl font-bold">
                                                        {studentInfo.avatar}
                                                    </AvatarFallback>
                                                </Avatar>
                                                <div>
                                                    <CardTitle className="text-white text-2xl">{studentInfo.name}</CardTitle>
                                                    <CardDescription className="text-white/70 text-lg">{studentInfo.rollNumber}</CardDescription>
                                                </div>
                                            </div>
                                            {!isEditingProfile ? (
                                                <Button
                                                    onClick={handleProfileEdit}
                                                    className="bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30 flex items-center gap-2"
                                                >
                                                    <Edit className="w-4 h-4" />
                                                    Edit Profile
                                                </Button>
                                            ) : (
                                                <div className="flex gap-2">
                                                    <Button
                                                        onClick={handleProfileSave}
                                                        className="bg-green-500/20 backdrop-blur-sm border border-green-500/30 text-green-200 hover:bg-green-500/30 flex items-center gap-2"
                                                    >
                                                        <Save className="w-4 h-4" />
                                                        Save
                                                    </Button>
                                                    <Button
                                                        onClick={handleProfileCancel}
                                                        className="bg-red-500/20 backdrop-blur-sm border border-red-500/30 text-red-200 hover:bg-red-500/30 flex items-center gap-2"
                                                    >
                                                        <X className="w-4 h-4" />
                                                        Cancel
                                                    </Button>
                                                </div>
                                            )}
                                        </div>
                                    </CardHeader>
                                    <CardContent className="space-y-6">
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                            <div className="space-y-4">
                                                <div>
                                                    <label className="text-white/70 text-sm">Email</label>
                                                    {isEditingProfile ? (
                                                        <Input
                                                            value={editableProfile.email}
                                                            onChange={(e) => handleProfileChange('email', e.target.value)}
                                                            className="bg-white/10 border-white/20 text-white placeholder-white/60 mt-1"
                                                            type="email"
                                                        />
                                                    ) : (
                                                        <p className="text-white font-medium">{studentInfo.email}</p>
                                                    )}
                                                </div>
                                                <div>
                                                    <label className="text-white/70 text-sm">Branch</label>
                                                    <p className="text-white font-medium">{studentInfo.branch}</p>
                                                </div>
                                                <div>
                                                    <label className="text-white/70 text-sm">Year</label>
                                                    <p className="text-white font-medium">{studentInfo.year}</p>
                                                </div>
                                                <div>
                                                    <label className="text-white/70 text-sm">Section</label>
                                                    <p className="text-white font-medium">{studentInfo.section}</p>
                                                </div>
                                            </div>
                                            <div className="space-y-4">
                                                <div>
                                                    <label className="text-white/70 text-sm">Phone</label>
                                                    {isEditingProfile ? (
                                                        <Input
                                                            value={editableProfile.phone}
                                                            onChange={(e) => handleProfileChange('phone', e.target.value)}
                                                            className="bg-white/10 border-white/20 text-white placeholder-white/60 mt-1"
                                                            type="tel"
                                                        />
                                                    ) : (
                                                        <p className="text-white font-medium">{studentInfo.phone}</p>
                                                    )}
                                                </div>
                                                <div>
                                                    <label className="text-white/70 text-sm">Address</label>
                                                    {isEditingProfile ? (
                                                        <Input
                                                            value={editableProfile.address}
                                                            onChange={(e) => handleProfileChange('address', e.target.value)}
                                                            className="bg-white/10 border-white/20 text-white placeholder-white/60 mt-1"
                                                        />
                                                    ) : (
                                                        <p className="text-white font-medium">{studentInfo.address}</p>
                                                    )}
                                                </div>
                                                <div>
                                                    <label className="text-white/70 text-sm">Overall Attendance</label>
                                                    {/* <p className="text-white font-medium">{studentInfo.attendance.percentage}%</p> */}
                                                </div>
                                            </div>
                                        </div>
                                        {isEditingProfile && (
                                            <div className="p-4 bg-white/5 rounded-lg border border-white/10">
                                                <p className="text-white/70 text-sm">
                                                    <strong>Note:</strong> Only email, phone, and address can be edited. Academic information like branch, year, and section cannot be changed.
                                                </p>
                                            </div>
                                        )}
                                        {profileSaveMessage && (
                                            <div className="p-4 bg-green-500/10 rounded-lg border border-green-500/20">
                                                <p className="text-green-200 text-sm font-medium">{profileSaveMessage}</p>
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            </div>
                        </div>
                    )}

                    {/* Timetable Section */}
                    {activeSection === "timetable" && (
                        <div className="h-full overflow-y-auto p-8 animate-in fade-in-0 slide-in-from-right-4 duration-500">
                            <div className="space-y-8 max-w-7xl mx-auto">

                                {/* Header */}
                                <div>
                                    <h1
                                        className="text-5xl font-extrabold text-white mb-2"
                                        style={{
                                            fontFamily: "Inter, system-ui, -apple-system, sans-serif",
                                            fontWeight: 900,
                                            letterSpacing: "-0.02em",
                                        }}
                                    >
                                        Class Timetable
                                    </h1>
                                    <p className="text-white/80 text-lg">Your weekly class schedule</p>
                                </div>

                                {/* Timetable Card */}
                                <Card className="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl">
                                    <CardContent className="p-6">
                                        <div className="overflow-x-auto">
                                            {timetableLoading ? (
                                                <div className="text-white/80 p-6">Loading timetable...</div>
                                            ) : timetableError ? (
                                                <div className="text-red-300 p-6">{timetableError}</div>
                                            ) : (
                                                <div className="space-y-4">
                                                    {["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"].map(
                                                        (day, dayIndex) => {
                                                            const dayClasses = timetableData.filter(
                                                                (item) => item.day === day
                                                            );

                                                            return (
                                                                <div
                                                                    key={day}
                                                                    className={`animate-in fade-in-0 slide-in-from-left-2 duration-500 delay-${200 + dayIndex * 100
                                                                        }`}
                                                                >
                                                                    {/* Day Title */}
                                                                    <h3 className="text-white font-bold text-lg mb-3">
                                                                        {day}
                                                                    </h3>

                                                                    {/* Classes */}
                                                                    <div className="grid gap-3">
                                                                        {dayClasses.length > 0 ? (
                                                                            dayClasses.map((classItem) => (
                                                                                <div
                                                                                    key={classItem.id}
                                                                                    className="flex items-center gap-4 p-4 bg-white/5 rounded-lg"
                                                                                >
                                                                                    {/* Time */}
                                                                                    <div className="text-white font-mono text-sm bg-white/10 px-3 py-1 rounded">
                                                                                        {classItem.time}
                                                                                    </div>

                                                                                    {/* Subject + Teacher */}
                                                                                    <div className="flex-1">
                                                                                        <p className="text-white font-medium">
                                                                                            {classItem.subject}
                                                                                        </p>
                                                                                        <p className="text-white/70 text-sm">
                                                                                            {classItem.teacher}
                                                                                        </p>
                                                                                    </div>

                                                                                    {/* Room */}
                                                                                    <div className="text-white/70 text-sm">
                                                                                        Room: {classItem.room}
                                                                                    </div>
                                                                                </div>
                                                                            ))
                                                                        ) : (
                                                                            <div className="text-white/60 text-center py-4">
                                                                                No classes scheduled
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                </div>
                                                            );
                                                        }
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                    </CardContent>
                                </Card>
                            </div>
                        </div>
                    )}

                </div>
            </div>